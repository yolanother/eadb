[ -n "$BASH_VERSION" ] || [ -n "$ZSH_VERSION" ] || return

function adb-push-with-devid {
    local device=$1
    shift
    shift
    local last="${@: -1}"
    for file in "${@:1:($#-1)}"; do
        echo -n 'Pushing '
		echo -n $file
		echo -n '->'
		echo "$device:$last"
		echo -n "  "
        adb -s $device push "$file" "$last"
    done
}

function eadb-select {
    local dids=`adb devices 2>&1 | /bin/grep 'sideload$\|device$\|recovery$' | awk '{print $1}'`
    if [ `echo "$dids" | wc -l` == "1" ]; then
        name=`cat "$HOME/.eadb/$dids" 2>/dev/null`
        if [ -n "$name" ]; then
            echo "Only one device found using $name ($dids)" >&2
        else
            echo "Only one device found using $dids" >&2
        fi
        devid[0]="$dids"
        DEVICE=0
        DEV="$dids"
        echo -n $DEV
        return
    fi

    echo "Please select a device:" >&2
    if [ "$1" == "true" ]; then
        echo "  a) Run on all devices" >&2
    fi
    local devs=`adb devices 2>&1 | /bin/grep 'sideload$\|device$\|recovery$' | sed 's/.\(sideload\|device\|recovery\)/~\1/g'`
    local d=1
    for line in $devs; do
        if [ "device" != "$line" ] && [ "recovery" != "$line" ] && [ "sideload" != "$line" ] && [ -n "$line"  ] ; then
            mode[$d]=`echo "$line" | /bin/grep -o '~.*' | sed 's/^~//'`
            line=`echo "$line" | sed 's/~.*//'`
            devid[$d]="$line"
            if [ "${mode[$d]}" == "device" ]; then
                mod=`adb -s $line shell getprop ro.product.model`
            else
                mod=""
            fi
            modid[$d]="$mod"
            if [ -f "$HOME/.eadb/$line" ]; then
                name=`cat "$HOME/.eadb/$line"`
                echo "  $d) $name - $line $mod" >&2
            else
                echo "  $d) $line $mod" >&2 
            fi
            d=`expr $d + 1`
        fi
    done

    if [ "$d" == "2" ]; then
        echo -n "${devid[1]}"
    else
        read -p "  Device Number: " device
		if [ "a" == "$device" ]; then
			adb devices 2>&1 | /bin/grep 'sideload$\|device$\|recovery$' | awk '{print $1}'
		else
	        echo "${devid[$device]}"
		fi
    fi
}

function eadb {
    if [ -z "$1" ]; then
        eadb help
        return;
    fi

    if [ "$1" == "shell" ] && [ "$2" == "pull" ]; then
        shift
    fi

    if [ "$1" == "shell" ] && [ "$2" == "push" ]; then
        shift
    fi

	if [ "$1" == "--shortlist" ]; then
		echo "`adb 2>&1 | /bin/grep -o '^  adb [^ ]*' | sed 's/^  adb //g' | sort | uniq | tr "\\n" " "` setdefault unsetdefault toggle-silent show-default name wait plogcat install-mirroring slogcat screenshot start input-text input-key"
    elif [ "$1" == "unsetdefault" ]; then
        unset ADB_DEFAULT_DEVICE
        unset ADB_DEFAULT_MODEL
	elif [ "$1" == "model" ]; then
		if [ -z "$2" ]; then
			eadb-select true | xargs -i adb -s {} shell getprop ro.product.model
		else
			adb -s "$2" shell getprop ro.product.model
		fi
    elif [ "$1" == "devices" ] || [ "$1" == "connect" ] || [ "$1" == "disconnect" ] || [ "$1" == '-s' ] || [ "$1" == "$d" ]; then
        if [ "-s" == "$1" ] && [ "$3" == "push" ]; then
            shift
            local devid=$1
            shift
            adb-push-with-devid $devid $*
        else
            adb $*
        fi
    elif [ "start" == "$1" ]; then
        shift
        if [ -z "$1" ]; then
            echo "Usage: eadb start application.package.name (applaction.package.name.activity)"
        else
            device=$(eadb-select)
            adb wait-for-device 2>/dev/null
            if [ -z "$2" ]; then
                echo $device | xargs -i adb -s {} shell am start -a android.intent.action.MAIN -n $1
            else
                echo $device | xargs -i adb -s {} shell am start -n $1/$2
            fi
        fi
    elif [ "screenshot" == "$1" ]; then
        shift
        if [ -z "$1" ]; then
           echo "Usage: eadb screenshot /path/to/screenshot.png"
        else
            device=$(eadb-select)
            tmp=`mktemp`
            echo "Grabbing screenshot..."
            echo -n "  "
            echo $device | xargs -i adb -s {} shell screencap -p /sdcard/`basename $tmp`
            echo $device | xargs -i adb -s {} pull /sdcard/`basename $tmp` $1
            echo $device | xargs -i adb -s {} shell rm /sdcard/`basename $tmp`
            echo "  Screenshot stored in $1"
        fi
    elif [ "slogcat" == "$1" ]; then
        shift
        if [ "$1" == "-p" ]; then
            shift
            command="plogcat $1"
            shift
        else
            command=logcat
        fi


        lcparams=`echo $@ | grep -o "[a-zA-Z0-9]*:[A-Z]"`
        search=`echo "$@" | sed 's/[A-Za-z0-9]*:[A-Z]//g' | sed 's/ /\\\\|[IDWEV]\//g' | sed 's/\\\\|\[IDWEV\]\/$//g'`
        if [ -z "$search" ]; then
            eadb $command $lcparams
        else
            eadb $command $lcparams | grep "E/AndroidRuntime\|[IDWEV]/$search"
        fi
    elif [ "plogcat" == "$1" ]; then
        shift
        device=$(eadb-select true)
		pid="`adb -s $device shell ps | /bin/grep $1 | awk '{print $2}' | sed 's/\n/|/g' | tr "\\n" " " | sed "s/ $/\n/g" | sed "s/ /\\\\\\|/g"`"
		echo "$1: Process $pid"
		if [ -n "$pid" ]; then
        	adb -s $device logcat | /bin/grep "$pid"
		else
		echo "Process is not currently running."
	fi
    elif [ "name" == "$1" ]; then
        device=$(eadb-select)
        read -p "Please provide a name for $device: " NAME
        if [ ! -d $HOME/.eadb ]; then
            mkdir $HOME/.eadb 2>/dev/null
        fi
        echo "$NAME" > $HOME/.eadb/$device
    elif [ "wait" == "$1" ]; then
        shift
        devid=""
        type="device"
        if [ "$1" == "-s" ]; then
           devid="$2"
            if [ -n "$3" ]; then
                type="$3"
            fi
        else
            if [ -n "$1" ]; then
                type="$1"
            fi
        fi
        devinfo=`adb devices | /bin/grep -v "List of devices attached\|Only one device" | /bin/grep . | /bin/grep "$devid" | /bin/grep "$type" `
        if [ -z "$devinfo" ]; then
            sleep .5
            eadb wait $*
       fi
    elif [ "help" == "$1" ] || [ "-h" == "$1" ] || [ "--help" == "$1" ] || [ -z "$1" ]; then
            adb -h
            echo
            echo "eadb specific commands:"
            echo "  setdefault                    - Makes a device from the list the default device when running eadb."
            echo "  unsetdefault                  - Allows the prompt to show up if there are more than one devices."
            echo "  toggle-silent                 - Shows/hides the device sn/name when using a default device."
            echo "  show-default                  - Shows the current default device"
            echo "  name                          - Stores a name for a device"
            echo "  wait (mode)                   - Waits until a specific mode is detected"
            echo "  plogcat [package name]        - Runs logcat on a specific package name"
            echo "  install-mirroring             - Installs chromecast mirroring support on rooted device"
            echo "  slogcat (-p package_name) search terms"
            echo "  screenshot                    - Grabs a screenshot"
            echo "  start                         - Start either the default activity or a specified activity"
            echo "  input-text                    - Enter text on the device"
            echo "  input-key                     - Send a key or set of keys"
    else
        if [ -n "$ADB_DEFAULT_DEVICE" ] && [ "$1" != "setdefault" ]; then
            if [ -z "$EADB_SILENCE_DEFAULT_PROMPT" ]; then
                echo "Using default device $ADB_DEFAULT_DEVICE $ADB_DEFAULT_MODEL" >&2
            fi
            if [ "push" == "$1" ] && [ -n "$ADB_DEFAULT_DEVICE" ]; then
                adb-push-with-devid $ADB_DEFAULT_DEVICE "$@"
            else
                adb -s $ADB_DEFAULT_DEVICE "$@"
            fi
        elif [ "$1" == "install-mirroring" ]; then
        	device=`eadb-select`
			adb -s $device shell sqlite3 /data/data/com.google.android.gsf/databases/gservices.db "INSERT INTO overrides (name, value) VALUES ('gms:cast:mirroring_enabled', 'true');"
			adb -s $device shell sqlite3 /data/data/com.google.android.gsf/databases/gservices.db "UPDATE overrides SET value='true' WHERE name='gms:cast:mirroring_enabled';"
			adb -s $device shell am force-stop com.google.android.gsf
			adb -s $device shell am force-stop com.google.android.gms
			adb -s $device shell am force-stop com.google.android.apps.chromecast.app
        elif [ "show-default" == "$1" ]; then
            if [ -z "$ADB_DEFAULT_DEVICE" ]; then
                echo "No default device is currently set."
            else
                echo "Using default device $ADB_DEFAULT_DEVICE $ADB_DEFAULT_MODEL"
            fi
        elif [ "input-text" == "$1" ]; then
            shift
		    eadb shell input text $*
        elif [ "input-key" == "$1" ]; then
            shift
            eadb shell input keyevent $*
        elif [ "toggle-silent" == "$1" ]; then
            if [ -z "$EADB_SILENCE_DEFAULT_PROMPT" ]; then
                EADB_SILENCE_DEFAULT_PROMPT=true
            else
                unset EADB_SILENCE_DEFAULT_PROMPT
            fi
		elif [ "setdefault" == "$1" ]; then
	        export ADB_DEFAULT_DEVICE=`eadb-select true`
		elif [ "$1" == "push" ]; then
			for device in `eadb-select true`; do
				adb-push-with-devid $device $*
			done
		elif [ -n "$ADB_DEFAULT_DEVICE" ]; then
			if [ "$EADB_SILENCE_DEFAULT_PROMPT" != "true" ]; then
				echo "Running on: $ADB_DEFAULT_DEVICE"
			fi
			echo "$ADB_DEFAULT_DEVICE" | xargs -i adb -s {} $*
        else
            eadb-select true | xargs -i adb -s {} $*
        fi
    fi
}

_eadbcompletescript()
{
 	local path="`dirname $(readlink -f $0)`"
	_script_commands=$(eadb --shortlist)

	local cur prev
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD - 1]}"
	if [ "push" == "$prev" ]; then
		COMPREPLY=( $(compgen -W "`ls -d ${cur}*`" -- ${cur}) )
	elif [ "pull" == "$prev" ]; then
		COMPREPLY=( $(compgen -W "`adb shell 'ls -F ${cur} 2>/dev/null' | sed 's/\r//g' | sed 's_^\(ld\|d\) \(.*\)_\2_' | sed 's/^[-l?]* //g' | sort | uniq | tr "\\n" " "`" -- ${cur}) )
	else
		COMPREPLY=( $(compgen -W "${_script_commands}" -- ${cur}) )
	fi

	return 0
}
complete -o filenames -F _eadbcompletescript eadb

